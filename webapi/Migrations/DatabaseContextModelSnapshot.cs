// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using webapi;

#nullable disable

namespace webapi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claims_role_id");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("webapi.Models.Auth.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("webapi.Models.Auth.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("webapi.Models.HR.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("district");

                    b.Property<string>("Municipilaty")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("municipilaty");

                    b.Property<string>("PopulatedPlace")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("populated_place");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street_address");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("webapi.Models.HR.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyEic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company_eic");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company_name");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("webapi.Models.HR.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("AdditionalAgreementDate")
                        .HasColumnType("date")
                        .HasColumnName("additional_agreement_date");

                    b.Property<string>("AdditionalClause")
                        .HasColumnType("text")
                        .HasColumnName("additional_clause");

                    b.Property<short?>("AnnualLeave")
                        .HasColumnType("smallint")
                        .HasColumnName("annual_leave");

                    b.Property<bool>("Article62Flag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("article62_flag");

                    b.Property<DateOnly?>("ChangeDate")
                        .HasColumnType("date")
                        .HasColumnName("change_date");

                    b.Property<short>("CodeCorection")
                        .HasColumnType("smallint")
                        .HasColumnName("code_corection");

                    b.Property<string>("CompanyEic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company_eic");

                    b.Property<DateOnly>("ConclusionDate")
                        .HasColumnType("date")
                        .HasColumnName("conclusion_date");

                    b.Property<int?>("ContractId")
                        .HasColumnType("integer")
                        .HasColumnName("contract_id");

                    b.Property<DateOnly?>("ContractTerm")
                        .HasColumnType("date")
                        .HasColumnName("contract_term");

                    b.Property<int>("ContractTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("contract_type_id");

                    b.Property<DateOnly>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("document_type_id");

                    b.Property<DateOnly>("ExecutionDate")
                        .HasColumnType("date")
                        .HasColumnName("execution_date");

                    b.Property<bool>("IsAnnex")
                        .HasColumnType("boolean")
                        .HasColumnName("is_annex");

                    b.Property<bool?>("IsTerminate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_terminate");

                    b.Property<int>("SysAdministrativeTerritoryId")
                        .HasColumnType("integer")
                        .HasColumnName("sys_administrative_territory_id");

                    b.Property<int?>("SysIconomicActivityId")
                        .HasColumnType("integer")
                        .HasColumnName("sys_iconomic_activity_id");

                    b.Property<int?>("SysPositionId")
                        .HasColumnType("integer")
                        .HasColumnName("sys_position_id");

                    b.Property<DateOnly?>("TerminationDate")
                        .HasColumnType("date")
                        .HasColumnName("termination_date");

                    b.Property<int?>("TerminationTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("termination_type_id");

                    b.Property<int?>("WorkTime")
                        .HasColumnType("integer")
                        .HasColumnName("work_time");

                    b.Property<decimal?>("WorkingWage")
                        .HasColumnType("numeric")
                        .HasColumnName("working_wage");

                    b.HasKey("Id")
                        .HasName("pk_contracts");

                    b.HasIndex("ContractTypeId")
                        .HasDatabaseName("ix_contracts_contract_type_id");

                    b.HasIndex("DocumentTypeId")
                        .HasDatabaseName("ix_contracts_document_type_id");

                    b.HasIndex("SysAdministrativeTerritoryId")
                        .HasDatabaseName("ix_contracts_sys_administrative_territory_id");

                    b.HasIndex("SysIconomicActivityId")
                        .HasDatabaseName("ix_contracts_sys_iconomic_activity_id");

                    b.HasIndex("SysPositionId")
                        .HasDatabaseName("ix_contracts_sys_position_id");

                    b.HasIndex("TerminationTypeId")
                        .HasDatabaseName("ix_contracts_termination_type_id");

                    b.ToTable("contracts", (string)null);
                });

            modelBuilder.Entity("webapi.Models.HR.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("department_name");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("integer")
                        .HasColumnName("manager_id");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.HasIndex("ManagerId")
                        .HasDatabaseName("ix_departments_manager_id");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("webapi.Models.HR.DepartmentTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("integer")
                        .HasColumnName("manager_id");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("team_name");

                    b.HasKey("Id")
                        .HasName("pk_department_teams");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_department_teams_department_id");

                    b.HasIndex("ManagerId")
                        .HasDatabaseName("ix_department_teams_manager_id");

                    b.ToTable("department_teams", (string)null);
                });

            modelBuilder.Entity("webapi.Models.HR.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyEmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("company_employee_id");

                    b.Property<int>("DepartmentTeamId")
                        .HasColumnType("integer")
                        .HasColumnName("department_team_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<int?>("InsuranceId")
                        .HasColumnType("integer")
                        .HasColumnName("insurance_id");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("middle_name");

                    b.Property<int>("PersonalDataId")
                        .HasColumnType("integer")
                        .HasColumnName("personal_data_id");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone_number");

                    b.Property<int?>("PositionId")
                        .HasColumnType("integer")
                        .HasColumnName("position_id");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("pk_employees");

                    b.HasIndex("DepartmentTeamId")
                        .HasDatabaseName("ix_employees_department_team_id");

                    b.HasIndex("InsuranceId")
                        .HasDatabaseName("ix_employees_insurance_id");

                    b.HasIndex("PersonalDataId")
                        .HasDatabaseName("ix_employees_personal_data_id");

                    b.HasIndex("PositionId")
                        .HasDatabaseName("ix_employees_position_id");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("webapi.Models.HR.EmployeeContracts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContractId")
                        .HasColumnType("integer")
                        .HasColumnName("contract_id");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_employee_contracts");

                    b.HasIndex("ContractId")
                        .HasDatabaseName("ix_employee_contracts_contract_id");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_employee_contracts_employee_id");

                    b.ToTable("employee_contracts", (string)null);
                });

            modelBuilder.Entity("webapi.Models.HR.Income", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AdditionalIncome")
                        .HasColumnType("numeric")
                        .HasColumnName("additional_income");

                    b.Property<decimal>("BonusIncome")
                        .HasColumnType("numeric")
                        .HasColumnName("bonus_income");

                    b.Property<DateOnly>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<decimal>("GrossRemuneration")
                        .HasColumnType("numeric")
                        .HasColumnName("gross_remuneration");

                    b.Property<decimal>("HealtInsuranceArt40")
                        .HasColumnType("numeric")
                        .HasColumnName("healt_insurance_art40");

                    b.Property<decimal>("HealthInsurance")
                        .HasColumnType("numeric")
                        .HasColumnName("health_insurance");

                    b.Property<decimal>("TotalInsurance")
                        .HasColumnType("numeric")
                        .HasColumnName("total_insurance");

                    b.HasKey("Id")
                        .HasName("pk_incomes");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_incomes_employee_id");

                    b.ToTable("incomes", (string)null);
                });

            modelBuilder.Entity("webapi.Models.HR.Insurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DooWithouthTzpbEmployee")
                        .HasColumnType("numeric")
                        .HasColumnName("doo_withouth_tzpb_employee");

                    b.Property<decimal>("DooWithouthTzpbInsurer")
                        .HasColumnType("numeric")
                        .HasColumnName("doo_withouth_tzpb_insurer");

                    b.Property<decimal>("HealthInsurance")
                        .HasColumnType("numeric")
                        .HasColumnName("health_insurance");

                    b.Property<decimal>("HealthInsuranceArticle40")
                        .HasColumnType("numeric")
                        .HasColumnName("health_insurance_article40");

                    b.Property<decimal>("HealthInsuranceEmployee")
                        .HasColumnType("numeric")
                        .HasColumnName("health_insurance_employee");

                    b.Property<decimal>("HealthInsuranceInsurer")
                        .HasColumnType("numeric")
                        .HasColumnName("health_insurance_insurer");

                    b.Property<int>("InsuranceTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("insurance_type_id");

                    b.Property<decimal>("ProfessionalPensionFund")
                        .HasColumnType("numeric")
                        .HasColumnName("professional_pension_fund");

                    b.Property<decimal>("TeacherPensionFund")
                        .HasColumnType("numeric")
                        .HasColumnName("teacher_pension_fund");

                    b.Property<decimal>("UniversalPensionEmployee")
                        .HasColumnType("numeric")
                        .HasColumnName("universal_pension_employee");

                    b.Property<decimal>("UniversalPensionInsurer")
                        .HasColumnType("numeric")
                        .HasColumnName("universal_pension_insurer");

                    b.HasKey("Id")
                        .HasName("pk_insurances");

                    b.HasIndex("InsuranceTypeId")
                        .HasDatabaseName("ix_insurances_insurance_type_id");

                    b.ToTable("insurances", (string)null);
                });

            modelBuilder.Entity("webapi.Models.HR.PersonalData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<int>("IdentityCode")
                        .HasColumnType("integer")
                        .HasColumnName("identity_code");

                    b.Property<string>("IdentityText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_text");

                    b.Property<string>("PersonalIdIssueBy")
                        .HasColumnType("text")
                        .HasColumnName("personal_id_issue_by");

                    b.Property<DateOnly?>("PersonalIdIssueDate")
                        .HasColumnType("date")
                        .HasColumnName("personal_id_issue_date");

                    b.Property<string>("PersonalIdNumber")
                        .HasColumnType("text")
                        .HasColumnName("personal_id_number");

                    b.HasKey("Id")
                        .HasName("pk_personal_data");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_personal_data_address_id");

                    b.ToTable("personal_data", (string)null);
                });

            modelBuilder.Entity("webapi.Models.HR.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("MaxSalary")
                        .HasColumnType("numeric")
                        .HasColumnName("max_salary");

                    b.Property<decimal>("MinSalary")
                        .HasColumnType("numeric")
                        .HasColumnName("min_salary");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("position_name");

                    b.HasKey("Id")
                        .HasName("pk_positions");

                    b.ToTable("positions", (string)null);
                });

            modelBuilder.Entity("webapi.Models.HR.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("ChildcareDays")
                        .HasColumnType("smallint")
                        .HasColumnName("childcare_days");

                    b.Property<DateOnly>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<short>("IncapacityDays")
                        .HasColumnType("smallint")
                        .HasColumnName("incapacity_days");

                    b.Property<short>("InsuranceDays")
                        .HasColumnType("smallint")
                        .HasColumnName("insurance_days");

                    b.Property<short>("InsuranceExperienceDays")
                        .HasColumnType("smallint")
                        .HasColumnName("insurance_experience_days");

                    b.Property<short>("OvertimeHours")
                        .HasColumnType("smallint")
                        .HasColumnName("overtime_hours");

                    b.Property<short>("PaidIncapacityDays")
                        .HasColumnType("smallint")
                        .HasColumnName("paid_incapacity_days");

                    b.Property<short>("UnpaidLeaveDays")
                        .HasColumnType("smallint")
                        .HasColumnName("unpaid_leave_days");

                    b.Property<short>("WithoutInsuranceDays")
                        .HasColumnType("smallint")
                        .HasColumnName("without_insurance_days");

                    b.Property<short>("WorkedHours")
                        .HasColumnType("smallint")
                        .HasColumnName("worked_hours");

                    b.HasKey("Id")
                        .HasName("pk_schedules");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_schedules_employee_id");

                    b.ToTable("schedules", (string)null);
                });

            modelBuilder.Entity("webapi.Models.System.SysAdministrativeTerritory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Ekatte")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ekatte");

                    b.Property<string>("MunicipalityName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("municipality_name");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("region_name");

                    b.Property<string>("TerritoryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("territory_name");

                    b.Property<string>("TerritoryType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("territory_type");

                    b.HasKey("Id")
                        .HasName("pk_sys_administrative_territories");

                    b.ToTable("sys_administrative_territories", (string)null);
                });

            modelBuilder.Entity("webapi.Models.System.SysContractDocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("Code")
                        .HasColumnType("smallint")
                        .HasColumnName("code");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("document_type");

                    b.HasKey("Id")
                        .HasName("pk_sys_contract_document_types");

                    b.ToTable("sys_contract_document_types", (string)null);
                });

            modelBuilder.Entity("webapi.Models.System.SysContractTerminationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("TerminationType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("termination_type");

                    b.HasKey("Id")
                        .HasName("pk_sys_contract_termination_types");

                    b.ToTable("sys_contract_termination_types", (string)null);
                });

            modelBuilder.Entity("webapi.Models.System.SysContractType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("ContractType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contract_type");

                    b.HasKey("Id")
                        .HasName("pk_sys_contract_types");

                    b.ToTable("sys_contract_types", (string)null);
                });

            modelBuilder.Entity("webapi.Models.System.SysIconomicActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("activity_name");

                    b.Property<string>("Nkid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nkid");

                    b.Property<string>("NkidId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nkid_id");

                    b.Property<string>("NkidSector")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nkid_sector");

                    b.Property<decimal>("TzpbPercent")
                        .HasColumnType("numeric")
                        .HasColumnName("tzpb_percent");

                    b.HasKey("Id")
                        .HasName("pk_sys_iconomic_activities");

                    b.ToTable("sys_iconomic_activities", (string)null);
                });

            modelBuilder.Entity("webapi.Models.System.SysInsuranceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("code");

                    b.Property<decimal>("DodTax")
                        .HasColumnType("numeric")
                        .HasColumnName("dod_tax");

                    b.Property<decimal[]>("DooWithouthTzpbEmployee")
                        .IsRequired()
                        .HasColumnType("numeric[]")
                        .HasColumnName("doo_withouth_tzpb_employee");

                    b.Property<decimal[]>("DooWithouthTzpbInsurer")
                        .IsRequired()
                        .HasColumnType("numeric[]")
                        .HasColumnName("doo_withouth_tzpb_insurer");

                    b.Property<decimal>("GvrcFund")
                        .HasColumnType("numeric")
                        .HasColumnName("gvrc_fund");

                    b.Property<decimal[]>("HealthInsurance")
                        .IsRequired()
                        .HasColumnType("numeric[]")
                        .HasColumnName("health_insurance");

                    b.Property<decimal[]>("HealthInsuranceArticle40")
                        .IsRequired()
                        .HasColumnType("numeric[]")
                        .HasColumnName("health_insurance_article40");

                    b.Property<decimal[]>("HealthInsuranceEmployee")
                        .IsRequired()
                        .HasColumnType("numeric[]")
                        .HasColumnName("health_insurance_employee");

                    b.Property<decimal[]>("HealthInsuranceInsurer")
                        .IsRequired()
                        .HasColumnType("numeric[]")
                        .HasColumnName("health_insurance_insurer");

                    b.Property<string>("InsuranceType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("insurance_type");

                    b.Property<decimal[]>("ProfessionalPensionFund")
                        .IsRequired()
                        .HasColumnType("numeric[]")
                        .HasColumnName("professional_pension_fund");

                    b.Property<decimal[]>("TeacherPensionFund")
                        .IsRequired()
                        .HasColumnType("numeric[]")
                        .HasColumnName("teacher_pension_fund");

                    b.Property<decimal[]>("UniversalPensionEmployee")
                        .IsRequired()
                        .HasColumnType("numeric[]")
                        .HasColumnName("universal_pension_employee");

                    b.Property<decimal[]>("UniversalPensionInsurer")
                        .IsRequired()
                        .HasColumnType("numeric[]")
                        .HasColumnName("universal_pension_insurer");

                    b.HasKey("Id")
                        .HasName("pk_sys_insurance_types");

                    b.ToTable("sys_insurance_types", (string)null);
                });

            modelBuilder.Entity("webapi.Models.System.SysPaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("Code")
                        .HasColumnType("smallint")
                        .HasColumnName("code");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_type");

                    b.HasKey("Id")
                        .HasName("pk_sys_payment_types");

                    b.ToTable("sys_payment_types", (string)null);
                });

            modelBuilder.Entity("webapi.Models.System.SysPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nkpd")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nkpd");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("position_name");

                    b.HasKey("Id")
                        .HasName("pk_sys_positions");

                    b.ToTable("sys_positions", (string)null);
                });

            modelBuilder.Entity("webapi.Models.Views.AnnexV", b =>
                {
                    b.Property<string>("ActivityName")
                        .HasColumnType("text")
                        .HasColumnName("activity_name");

                    b.Property<DateOnly?>("AdditionalAgreementDate")
                        .HasColumnType("date")
                        .HasColumnName("additional_agreement_date");

                    b.Property<bool>("Article62Flag")
                        .HasColumnType("boolean")
                        .HasColumnName("article62flag");

                    b.Property<DateOnly>("ConclusionDate")
                        .HasColumnType("date")
                        .HasColumnName("conclusion_date");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer")
                        .HasColumnName("contract_id");

                    b.Property<DateOnly?>("ContractTerm")
                        .HasColumnType("date")
                        .HasColumnName("contract_term");

                    b.Property<string>("ContractType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contract_type");

                    b.Property<string>("ContractTypeCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contract_type_code");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("document_type");

                    b.Property<string>("Ekatte")
                        .HasColumnType("text")
                        .HasColumnName("ekatte");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<DateOnly>("ExecutionDate")
                        .HasColumnType("date")
                        .HasColumnName("execution_date");

                    b.Property<string>("InsuranceTypeCode")
                        .HasColumnType("text")
                        .HasColumnName("insurance_type_code");

                    b.Property<bool>("IsTerminate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_terminate");

                    b.Property<string>("Nkid")
                        .HasColumnType("text")
                        .HasColumnName("nkid");

                    b.Property<string>("Nkpd")
                        .HasColumnType("text")
                        .HasColumnName("nkpd");

                    b.Property<string>("PositionName")
                        .HasColumnType("text")
                        .HasColumnName("position_name");

                    b.Property<string>("TerminationCode")
                        .HasColumnType("text")
                        .HasColumnName("termination_code");

                    b.Property<DateOnly?>("TerminationDate")
                        .HasColumnType("date")
                        .HasColumnName("termination_date");

                    b.ToTable((string)null);

                    b.ToView("annex_v", (string)null);
                });

            modelBuilder.Entity("webapi.Models.Views.ContractV", b =>
                {
                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("department_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("employee_name");

                    b.Property<string>("InsuranceTypeCode")
                        .HasColumnType("text")
                        .HasColumnName("insurance_type_code");

                    b.Property<string>("ManagerName")
                        .HasColumnType("text")
                        .HasColumnName("manager_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("PositionName")
                        .HasColumnType("text")
                        .HasColumnName("position_name");

                    b.Property<int>("personalDataId")
                        .HasColumnType("integer")
                        .HasColumnName("personal_data_id");

                    b.ToTable((string)null);

                    b.ToView("contract_v", (string)null);
                });

            modelBuilder.Entity("webapi.Models.Views.DepartmentTeamV", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("ManagerName")
                        .HasColumnType("text")
                        .HasColumnName("manager_name");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("team_name");

                    b.Property<string>("ddepartmentName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ddepartment_name");

                    b.ToTable((string)null);

                    b.ToView("department_teams_v", (string)null);
                });

            modelBuilder.Entity("webapi.Models.Views.DepartmentV", b =>
                {
                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("department_name");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("ManagerName")
                        .HasColumnType("text")
                        .HasColumnName("manager_name");

                    b.ToTable((string)null);

                    b.ToView("departments_v", (string)null);
                });

            modelBuilder.Entity("webapi.Models.Views.EmployeeV", b =>
                {
                    b.Property<long?>("ContractId")
                        .HasColumnType("bigint")
                        .HasColumnName("contract_id");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("department_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("employee_id");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("employee_name");

                    b.Property<string>("ManagerName")
                        .HasColumnType("text")
                        .HasColumnName("manager_name");

                    b.Property<long>("PersonalDataId")
                        .HasColumnType("bigint")
                        .HasColumnName("personal_data_id");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("position_name");

                    b.ToTable((string)null);

                    b.ToView("employee_v", (string)null);
                });

            modelBuilder.Entity("webapi.Models.Views.InsuranceV", b =>
                {
                    b.Property<string>("CompanyEic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company_eic");

                    b.Property<decimal>("DodTax")
                        .HasColumnType("numeric")
                        .HasColumnName("dod_tax");

                    b.Property<decimal>("DooWithouthTzpbEmployee")
                        .HasColumnType("numeric")
                        .HasColumnName("doo_withouth_tzpb_employee");

                    b.Property<decimal>("DooWithouthTzpbInsurer")
                        .HasColumnType("numeric")
                        .HasColumnName("doo_withouth_tzpb_insurer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<DateOnly>("ExecutionDate")
                        .HasColumnType("date")
                        .HasColumnName("execution_date");

                    b.Property<decimal>("GvrcFund")
                        .HasColumnType("numeric")
                        .HasColumnName("gvrc_fund");

                    b.Property<decimal>("HealthInsurance")
                        .HasColumnType("numeric")
                        .HasColumnName("health_insurance");

                    b.Property<decimal>("HealthInsuranceArticle40")
                        .HasColumnType("numeric")
                        .HasColumnName("health_insurance_article40");

                    b.Property<decimal>("HealthInsuranceEmployee")
                        .HasColumnType("numeric")
                        .HasColumnName("health_insurance_employee");

                    b.Property<decimal>("HealthInsuranceInsurer")
                        .HasColumnType("numeric")
                        .HasColumnName("health_insurance_insurer");

                    b.Property<string>("IdentityText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_text");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("initials");

                    b.Property<string>("InsuranceTypeCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("insurance_type_code");

                    b.Property<string>("Nkid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nkid");

                    b.Property<string>("NkidSector")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nkid_sector");

                    b.Property<string>("NkpdGroup")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nkpd_group");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<decimal>("ProfessionalPensionFund")
                        .HasColumnType("numeric")
                        .HasColumnName("professional_pension_fund");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.Property<decimal>("TeacherPensionFund")
                        .HasColumnType("numeric")
                        .HasColumnName("teacher_pension_fund");

                    b.Property<decimal>("TzpbPercent")
                        .HasColumnType("numeric")
                        .HasColumnName("tzpb_percent");

                    b.Property<decimal>("UniversalPensionEmployee")
                        .HasColumnType("numeric")
                        .HasColumnName("universal_pension_employee");

                    b.Property<decimal>("UniversalPensionInsurer")
                        .HasColumnType("numeric")
                        .HasColumnName("universal_pension_insurer");

                    b.ToTable((string)null);

                    b.ToView("insurance_v", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("webapi.Models.Auth.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claims_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("webapi.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claims_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("webapi.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("webapi.Models.Auth.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("webapi.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("webapi.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tokens_users_user_id");
                });

            modelBuilder.Entity("webapi.Models.HR.Contract", b =>
                {
                    b.HasOne("webapi.Models.System.SysContractType", "ContractType")
                        .WithMany()
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contracts_sys_contract_types_contract_type_id");

                    b.HasOne("webapi.Models.System.SysContractDocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contracts_sys_contract_document_types_document_type_id");

                    b.HasOne("webapi.Models.System.SysAdministrativeTerritory", "SysAdministrativeTerritory")
                        .WithMany()
                        .HasForeignKey("SysAdministrativeTerritoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contracts_sys_administrative_territories_sys_administrative");

                    b.HasOne("webapi.Models.System.SysIconomicActivity", "SysIconomicActivity")
                        .WithMany()
                        .HasForeignKey("SysIconomicActivityId")
                        .HasConstraintName("fk_contracts_sys_iconomic_activities_sys_iconomic_activity_id");

                    b.HasOne("webapi.Models.System.SysPosition", "SysPosition")
                        .WithMany()
                        .HasForeignKey("SysPositionId")
                        .HasConstraintName("fk_contracts_sys_positions_sys_position_id");

                    b.HasOne("webapi.Models.System.SysContractTerminationType", "TerminationType")
                        .WithMany()
                        .HasForeignKey("TerminationTypeId")
                        .HasConstraintName("fk_contracts_sys_contract_termination_types_termination_type_id");

                    b.Navigation("ContractType");

                    b.Navigation("DocumentType");

                    b.Navigation("SysAdministrativeTerritory");

                    b.Navigation("SysIconomicActivity");

                    b.Navigation("SysPosition");

                    b.Navigation("TerminationType");
                });

            modelBuilder.Entity("webapi.Models.HR.Department", b =>
                {
                    b.HasOne("webapi.Models.HR.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("fk_departments_employees_manager_id");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("webapi.Models.HR.DepartmentTeam", b =>
                {
                    b.HasOne("webapi.Models.HR.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_department_teams_departments_department_id");

                    b.HasOne("webapi.Models.HR.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("fk_department_teams_employees_manager_id");

                    b.Navigation("Department");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("webapi.Models.HR.Employee", b =>
                {
                    b.HasOne("webapi.Models.HR.DepartmentTeam", "DepartmentTeam")
                        .WithMany()
                        .HasForeignKey("DepartmentTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employees_department_teams_department_team_id");

                    b.HasOne("webapi.Models.HR.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .HasConstraintName("fk_employees_insurances_insurance_id");

                    b.HasOne("webapi.Models.HR.PersonalData", "PersonalData")
                        .WithMany()
                        .HasForeignKey("PersonalDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employees_personal_data_personal_data_id");

                    b.HasOne("webapi.Models.HR.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .HasConstraintName("fk_employees_positions_position_id");

                    b.Navigation("DepartmentTeam");

                    b.Navigation("Insurance");

                    b.Navigation("PersonalData");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("webapi.Models.HR.EmployeeContracts", b =>
                {
                    b.HasOne("webapi.Models.HR.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_contracts_contracts_contract_id");

                    b.HasOne("webapi.Models.HR.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_contracts_employees_employee_id");

                    b.Navigation("Contract");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("webapi.Models.HR.Income", b =>
                {
                    b.HasOne("webapi.Models.HR.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_incomes_employees_employee_id");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("webapi.Models.HR.Insurance", b =>
                {
                    b.HasOne("webapi.Models.System.SysInsuranceType", "InsuranceType")
                        .WithMany()
                        .HasForeignKey("InsuranceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_insurances_sys_insurance_types_insurance_type_id");

                    b.Navigation("InsuranceType");
                });

            modelBuilder.Entity("webapi.Models.HR.PersonalData", b =>
                {
                    b.HasOne("webapi.Models.HR.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_personal_data_addresses_address_id");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("webapi.Models.HR.Schedule", b =>
                {
                    b.HasOne("webapi.Models.HR.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_schedules_employees_employee_id");

                    b.Navigation("Employee");
                });
#pragma warning restore 612, 618
        }
    }
}
